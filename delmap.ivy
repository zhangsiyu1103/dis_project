#lang ivy1.8


include collections

#
#
# A delegation maps keys to values in a way that lets us map a range
# of keys at once. This can be used, for example, to determine the
# primary server for a key in a shraded key/value store.
#

module isolate delegation_map(key,id) = {
    attribute test=impl

    # set the value of all keys in the range [lo,hi] to id

    action set(lo:key.iter.t,hi:key.iter.t,dst:id)

    # get the value of key k

    action get(k:key.t) returns (val:id)

    # The delegation map is a relation, since as a function it might
    # not be stratified.

    # Return the the least upper bound of an iterator among all
    # the range boundaries in the map.

    action lub(lo:key.iter.t) returns (hi:key.iter.t)

    relation map(K:key, X:id)

    specification {
    after init {
            map(K,X) := X = 0;
        }

    before set {
        map(K,X) := (X = dst) & key.iter.between(lo,K,hi)
                    | map(K,X) & ~key.iter.between(lo,K,hi)
    }
        after get {
        assert map(k,val)
    }

    invariant map(K,V) & map(K,W) -> V = W
    }

    # The implementation uses an ordered map.  Each key in the
    # the ordered map represents the lower bound of an interval of
    # keys with the same value. The map gives the values for the lower bounds.

    implementation {

    instance imap : ordered_map(key,id)

    implement set(lo:key.iter.t,hi:key.iter.t,dst:id)  {
        if lo < hi {
            if ~key.iter.is_end(hi) {
                local nid:id {
                nid := imap.get(key.iter.val(imap.glb(hi)),nid);
                call imap.set(key.iter.val(hi),nid)
                }
            };
            call imap.erase(lo,hi);
            call imap.set(key.iter.val(lo),dst)
        }
    }

    implement get(k:key.t) returns (val:id)  {
        val := imap.get(key.iter.val(imap.glb(key.iter.create(k))),val)
    }

    implement lub(lo:key.iter.t) returns (hi:key.iter.t) {
        hi := imap.lub(lo);
        debug "delmap lub" with lo=lo,hi=hi;
    }

    # The value of every key between K and its successor is the same as K's value.
    # invariant imap.maps(key.iter.val(I),V) & imap.gap(I,J) & key.iter.between(I,K,J) -> map(K,V)
    # We always have an entry for key zero.
    # invariant imap.contains(0)
    }
}
