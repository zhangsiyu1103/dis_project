#lang ivy1.8

include collections

#
# A `hash_table` is a key/value map that allows to set the value of a
# key, get the value of a key and extract the values of a range of
# keys and incorporate values of a range of keys.
#
# The parameters are:
#
# - `key`: the key type, with `iterable` traits
# - `value`: the value type
# - `shard`: a type representing the values of keys in a range (see shard.ivy)

module hash_table(key,value,shard) = {

    ###########################################
    # Interface

    # Set the value of a key
    action set(k:key.t, v:value)

    # Get the value of a key
    action get(k:key.t) returns (v:value)

    # Erase a range of keys

    action erase(lo:key.iter.t,hi:key.iter.t)

    # Extract a shard from a hash table. That is, return a shard
    # containing all of the key/value pairs with keys in the range
    # [lo,hi), where lo and hi are key iterators.

    action extract_(lo:key.iter.t,hi:key.iter.t) returns(res:shard)

    # Incorporates a shard into a hash table. That is, givemn a shard,
    # erase all of the keys in the shard's key range and replace them
    # with the key/value paris in the shard.

    action incorporate(s:shard)

    ###########################################
    # Specification

    function hash(X:key) : value

    specification {
    after init {
            hash(X) := 0;
        }

    before set {
        hash(k) := v
    }

    after get {
        assert v = hash(k)
    }

    after extract_ {
        assert shard.lo(res) = lo;
        assert shard.hi(res) = hi;
        assert key.iter.between(lo,X,hi)-> shard.value(res,X) = hash(X);
        assert shard.valid(res)
    }

    before incorporate(s:shard) {
        assert shard.valid(s);
        hash(K) := shard.value(s,K) 
                   if key.iter.between(shard.lo(s),K,shard.hi(s))
                   else hash(K)
    }
    }

    ###########################################
    # Implementation

    implementation {

    instance tab : ordered_map(key,value)

    implement set {
        call tab.set(k,v)
    }

    implement get {
        v := tab.get(k,0)
    }

    implement extract_ {
        res.kv := shard.kvt.empty;
        if lo <=  hi{
            var idx := tab.lub(lo);
            while idx < hi
                invariant lo <= idx & (idx < hi -> tab.contains(idx.val))
                invariant lo.between(X,idx) & tab.contains(X) -> 
                               exists I. (res.key_at(I,X) & tab.maps(X,res.value_at(I)))
                invariant res.key_at(I,X) -> lo.between(X,idx) & tab.contains(X)
                invariant shard.valid(res)
            {
                var k := idx.val;
                res.kv := res.kv.append_pair(k,tab.get(k,0));
                idx := tab.next(idx)
            };
        }else{
            var mid:key.iter.t := 0-1;
            var idx := tab.lub(lo);
            while idx < mid
                invariant lo <= idx & (idx < mid -> tab.contains(idx.val))
                invariant lo.between(X,idx) & tab.contains(X) -> 
                               exists I. (res.key_at(I,X) & tab.maps(X,res.value_at(I)))
                invariant res.key_at(I,X) -> lo.between(X,idx) & tab.contains(X)
                invariant shard.valid(res)
            {
                var k := idx.val;
                res.kv := res.kv.append_pair(k,tab.get(k,0));
                idx := tab.next(idx)
            };

            mid := 0;
            idx := tab.lub(mid);
            while idx < hi
                invariant mid <= idx & (idx < hi -> tab.contains(idx.val))
                invariant mid.between(X,idx) & tab.contains(X) -> 
                               exists I. (res.key_at(I,X) & tab.maps(X,res.value_at(I)))
                invariant res.key_at(I,X) -> mid.between(X,idx) & tab.contains(X)
                invariant shard.valid(res)
            {
                var k := idx.val;
                res.kv := res.kv.append_pair(k,tab.get(k,0));
                idx := tab.next(idx)
            };

        }
        res.lo := lo;
        res.hi := hi;
    }

    implement incorporate(s:shard) {
            var lo := s.lo;
            var hi := s.hi;
            if lo <= hi{
                call tab.erase(lo,hi);
                var pos:shard.index.t  := 0;
                while pos < s.kv.end
                    invariant 0 <= pos & pos <= s.kv.end
                    invariant lo.between(X,hi) & s.value(X) = 0 -> ~tab.contains(X)
                    invariant lo.between(X,hi) & 0 <= Y & Y < pos & s.key_at(Y,X) & s.value(X) ~= 0
                                     -> tab.contains(X) & tab.maps(X,s.value(X))
                    invariant ~lo.between(X,hi) -> spec.tab_invar(X,Y)
                    # following are object invariants of tab and shouldn't be needed here
                    invariant tab.maps(X,Y) & tab.maps(X,Z) -> Y = Z & tab.contains(X)
                {
                    var k := s.kv.get_key(pos);
                    var d := s.kv.get_value(pos);
                    if lo.between(k,hi) & d ~= 0{
                        call tab.set(k,d)
                    };
                    pos := pos.next
                }
            }else{
                var mid:key.iter.t := 0-1;
                call tab.erase(lo,mid);
                var pos:shard.index.t  := 0;
                while pos < s.kv.end
                    invariant 0 <= pos & pos <= s.kv.end
                    invariant lo.between(X,mid) & s.value(X) = 0 -> ~tab.contains(X)
                    invariant lo.between(X,mid) & 0 <= Y & Y < pos & s.key_at(Y,X) & s.value(X) ~= 0
                                     -> tab.contains(X) & tab.maps(X,s.value(X))
                    invariant ~lo.between(X,mid) -> spec.tab_invar(X,Y)
                    # following are object invariants of tab and shouldn't be needed here
                    invariant tab.maps(X,Y) & tab.maps(X,Z) -> Y = Z & tab.contains(X)
                {
                    var k := s.kv.get_key(pos);
                    var d := s.kv.get_value(pos);
                    if lo.between(k,mid) & d ~= 0{
                        call tab.set(k,d)
                    };
                    pos := pos.next
                }

                mid := 0;
                call tab.erase(mid, hi);
                pos  := 0;
                while pos < s.kv.end
                    invariant 0 <= pos & pos <= s.kv.end
                    invariant mid.between(X,hi) & s.value(X) = 0 -> ~tab.contains(X)
                    invariant mid.between(X,hi) & 0 <= Y & Y < pos & s.key_at(Y,X) & s.value(X) ~= 0
                                     -> tab.contains(X) & tab.maps(X,s.value(X))
                    invariant ~lo.between(X,hi) -> spec.tab_invar(X,Y)
                    # following are object invariants of tab and shouldn't be needed here
                    invariant tab.maps(X,Y) & tab.maps(X,Z) -> Y = Z & tab.contains(X)
                {
                    var k := s.kv.get_key(pos);
                    var d := s.kv.get_value(pos);
                    if mid.between(k,hi) & d ~= 0{
                        call tab.set(k,d)
                    };
                    pos := pos.next
                }

            }
    }

        implement erase {
            tab.erase(lo,hi)
        }

    object spec = {
         function tab_invar(X,Y) =
           (tab.contains(X) & tab.maps(X,Y) -> hash(X) = Y)
           & (~tab.contains(X) -> hash(X) = 0)
           & (tab.contains(X) -> tab.maps(X,hash(X)))
    }

        action begin returns (res:key.iter.t) = {
            res := tab.lub(key.iter.begin);
        }

        action end returns (res:key.iter.t) = {
            res := key.iter.end;
        }

        action next(x:key.iter.t) returns (x:key.iter.t) = {
            x := tab.next(x);
        }

        # invariant shard.value(S,X)=Z -> spec.tab_invar(X,Y)
    # invariant spec.tab_invar(X,Y)

    }

}

