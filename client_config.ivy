#lang ivy1.8

include network
include shard

module client_server_network = {

    global {
        instance shard_t : table_shard(key_t, file)
    }


    class config = {
        field primary : server_id
        field secondary : server_id
        filed replicating :bool
    }


    class server_config = {
        field ring_id : nat
        field self_id : server_id
        field relative_primary : server_id
        field relative_secondary : server_id
        field primary_lo : unsigned_bit_vector(8)
        field primary_hi : unsigned_bit_vector(8)
        field secondary_lo : unsigned_bit_vector(8)
        field secondary_hi : unsigned_bit_vector(8)
    }

    class repartition_config = {
        field lo : unsigned_bit_vector(8)
        field hi : unsigned_bit_vector(8)
        field old_p : server_id
        field old_s : server_id
        field new_p : server_id
        field new_s : server_id
    }

    #class copy_config = {
    #    field lo : unsigned_bit_vector(8)
    #    field hi : unsigned_bit_vector(8)
    #    field src : server_id
    #    field target : server_id
    #    #field new_p : server_id
    #    #field new_s : server_id
    #}




    # Clients and servers communicate with each other using
    # the following message kinds:

    type msg_kind = {
        append_req_kind,    # append request
        append_rsp_kind,    # append response
        show_req_kind,      # show request
        show_rsp_kind,      # show response
        replicate_kind      # server-to-server file transfer
        # manager network kind
        fail_kind,
        re_prepared_kind,
        re_view_kind,
        re_abort_kind,
        re_ack_kind,
        ping_kind
    }

    # Here is the message class for client-server messages

    class msg_t = {
        field kind : msg_kind          # message kind
        field key : key_t
        field val : byte               # byte to append (if any)
        field contents : file          # file contents (if any)
        field shard : shard_t
        field src_client : client_id   # requesting client id
        field primary : server_id      # who is primary?
    }

    # Overlay for client-server messages

    instance net : tcp_test.net(msg_t)

}
